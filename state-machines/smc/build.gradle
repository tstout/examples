apply plugin: 'java'

repositories {
    mavenCentral()
}

//configurations {
//    smc
////    jruby
//}

ext.libraries = [
        runtime_core: [
                'com.google.guava:guava:14.0.1'
        ],
        test_core: [
                'org.mockito:mockito-core:1.9.0',
                'junit:junit:4.10'
        ]
]

//
// TODO - look at this plugin for JS support: http://eriwen.github.io/gradle-js-plugin/
//

//
// Use local lib dependency since current State Machine Compiler is not
// available in maven central (Boo!)
//
dependencies {
    jruby 'org.jruby:jruby-complete:1.7.8'

    smc fileTree(dir: 'lib', includes: ['*.jar'])
    compile(
            fileTree(dir: 'lib', includes: ['*.jar']),
            libraries.runtime_core
    )
    testCompile(libraries.test_core)
}

task gensrcDirs {
    def baseDir = new File("${project.buildDir}/generated-src")

    ['ruby', 'java', 'graphs'].each { dir ->
        new File(baseDir, dir).mkdirs()
    }
}

task(runLogin, dependsOn: ['gems'], type: JavaExec) {
    configure jrubyCommon
    description = 'run sample Login UI via JRuby'
    args = ['--2.0', 'src/main/ruby/lib/login_window.rb']
}

//
// Run rspec tests...
//
task(spec, dependsOn: ['classes', 'gems', 'smcRuby'], type: JavaExec) {
    configure jrubyCommon
    description = 'Run rspec tests via jruby'
    args = ['-S', 'build/gems/bin/rspec', 'src/main/ruby/spec']
}

//
// Run minitest...
//
task(minitest, dependsOn: "classes gems smcRuby".split(), type: JavaExec) {
    configure jrubyCommon
    description = 'Run minitest via jruby'
    args = ['--2.0', 'src/main/ruby/test/test_login.rb']
}

//
// State Machine Compiler stuff...
//
def smcCommon = {
    ext.outputPath = "${project.buildDir}/generated-src"
    ext.javaOutPath = "${ext.outputPath}/java"
    ext.rubyOutPath = "${ext.outputPath}/ruby"
    ext.graphOutPath = "${ext.outputPath}/graphs"
    ext.smcFiles = fileTree('src/main/smc').include('**/*.sm')
    classpath configurations.smc
    inputs.files smcFiles
    outputs.dir outputPath
    main = 'net.sf.smc.Smc'
}

task smcJava(type: JavaExec, dependsOn: 'gensrcDirs') {
    configure smcCommon

    args('-java')
    args('-d')
    args(ext.javaOutPath)
    args(fileTree('src/main/smc/java').include('**/*.sm'))
}

task smcRuby(type: JavaExec, dependsOn: 'gensrcDirs') {
    configure smcCommon

    args('-ruby')
    args('-d')
    args(ext.rubyOutPath)
    args(fileTree('src/main/smc/ruby').include('**/*.sm'))
}

//
// Note: on OSX, install graphviz. This will allow you to view the .dot graphs.
// You can convert .dot files to an image by executing
// dot -Tpng filename.dot -o outfile.png
//
task smcDiagrams(type: JavaExec, dependsOn: 'gensrcDirs') {
    configure smcCommon

    args('-graph')
    args('-glevel')
    args('1')
    args('-d')
    args(ext.graphOutPath)
    args(ext.smcFiles.files)
}

sourceSets.main.java.srcDir smcJava.outputPath
compileJava.dependsOn smcJava



