apply plugin: 'java'

repositories {
    mavenCentral()
}

configurations {
    smc
    rspec
}

ext.libraries = [
        runtime_core: [
                'com.google.guava:guava:14.0.1'
        ],
        test_core: [
                'org.mockito:mockito-core:1.9.0',
                'junit:junit:4.10'
        ]
]

//
// TODO - look at this plugin for JS support: http://eriwen.github.io/gradle-js-plugin/
//

//
// Use local lib dependency since current SMC not available in maven central (Boo!)
//
dependencies {
    rspec 'org.jruby:jruby-complete:1.7.8'
    smc fileTree(dir: 'lib', includes: ['*.jar'])
    compile(
            fileTree(dir: 'lib', includes: ['*.jar']),
            libraries.runtime_core
    )
    testCompile(libraries.test_core)
}

task gensrcDirs {
    def baseDir = new File("${project.buildDir}/generated-src/example/smc")

    ['ruby', 'java', 'graphs'].each { f ->
        new File(baseDir, f).mkdirs()
    }
}

def hasGem(gemName) {
    //
    // TODO - fix this gems/gems crap...not sure at them moment why the dirs are duplicated...
    //
    new File("${project.buildDir}/gems/gems").list().find { it.startsWith(gemName) } != null
}

task gems {
    description = 'install gems needed for jruby/rspec'
    ['rspec'].each { gem ->
        if (!hasGem(gem)) {
            javaexec {
                main = 'org.jruby.Main'
                classpath = configurations.rspec
                args = ['-S', 'gem', 'install', gem]
                environment['GEM_PATH'] = file('build/gems').path
                environment['GEM_HOME'] = file('build/gems').path
            }
        }
    }
}

//
// Run rspec tests...
//
task(spec, dependsOn: ["classes", "gems"], type: JavaExec) {
    description = 'Run rspec tests via jruby'
    main = 'org.jruby.Main'
    classpath = sourceSets.test.runtimeClasspath + configurations.rspec
    args = ['-S', 'build/gems/bin/rspec', 'src/main/ruby/spec']
    environment['GEM_HOME'] = file('build/gems').path
    environment['GEM_PATH'] = file('build/gems').path
}

//
// State Machine Compiler stuff...
//
def smcCommon = {
    ext.outputPath = "${project.buildDir}/generated-src/example/smc"
    ext.javaOutPath = "${ext.outputPath}/java"
    ext.rubyOutPath = "${ext.outputPath}/ruby"
    ext.graphOutPath = "${ext.outputPath}/graphs"
    ext.smcFiles = fileTree('src/main/smc').include('**/*.sm')
    classpath configurations.smc
    inputs.files smcFiles
    outputs.dir outputPath
    main = 'net.sf.smc.Smc'
}

task smcJava(type: JavaExec, dependsOn: 'gensrcDirs') {
    configure smcCommon

    args('-java')
    args('-d')
    args(ext.javaOutPath)
    args(ext.smcFiles.files)
}

task smcRuby(type: JavaExec, dependsOn: 'gensrcDirs') {
    configure smcCommon

    args('-ruby')
    args('-d')
    args(ext.rubyOutPath)
    args(ext.smcFiles.files)
}
//
// Note: on OSX, install graphviz. This will allow you to view the .dot graphs.
// You can convert .dot files to an image by executing
// dot -Tpng filename.dot -o outfile.png
//
task smcDiagrams(type: JavaExec, dependsOn: 'gensrcDirs') {
    configure smcCommon

    args('-graph')
    args('-glevel')
    args('1')
    args('-d')
    args(ext.graphOutPath)
    args(ext.smcFiles.files)
}

sourceSets.main.java.srcDir smcJava.outputPath
compileJava.dependsOn smcJava



