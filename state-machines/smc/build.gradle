apply plugin: 'java'

repositories {
    mavenCentral()
}

configurations {
    smc
    rspec
}

ext.libraries = [
        runtime_core: [
                'com.google.guava:guava:14.0.1'
        ],
        test_core: [
                'org.mockito:mockito-core:1.9.0',
                'junit:junit:4.10'
        ]
]

//
// TODO - look at this plugin for JS support: http://eriwen.github.io/gradle-js-plugin/
//

//
// Use local lib dependency since current SMC not available in maven central (Boo!)
//
dependencies {
    rspec 'org.jruby:jruby-complete:1.7.8'
    smc fileTree(dir: 'lib', includes: ['*.jar'])
    compile(
            fileTree(dir: 'lib', includes: ['*.jar']),
            libraries.runtime_core
    )
    testCompile(libraries.test_core)
}

task gensrcDirs {
    ext.genSrcDir = new File("${project.buildDir}/generated-src/example/smc")
    genSrcDir.mkdirs()
}

//def runJRuby(cmdArg) {
//    def cmd = "-S $cmdArg"
//    println "Running JRuby: $cmd"
//    Thread.currentThread().setContextClassLoader(JRuby.class.classLoader)
//    JRuby.main("$cmd".split())
//}

def hasGem(gemName) {
    //
    // TODO - fix this gems/gems crap...not sure at them moment why the dirs are duplicated...
    //
    new File("${project.buildDir}/gems/gems").list().find { it.startsWith(gemName) } != null
}

task gems {
    description = 'install gems needed for jruby/rspec'
    ['rspec'].each { gem ->
        if (!hasGem(gem)) {
            javaexec {
                main = 'org.jruby.Main'
                classpath = configurations.rspec
                args = ['-S', 'gem', 'install', gem]
                environment['GEM_PATH'] = file('build/gems').path
                environment['GEM_HOME'] = file('build/gems').path
            }
        }
    }
}

task(spec, dependsOn: ["classes", "gems"], type: JavaExec) {
    description = 'Run rspec tests via jruby'
    main = 'org.jruby.Main'
    classpath = sourceSets.test.runtimeClasspath + configurations.rspec
    args = ['-S', 'build/gems/bin/rspec', 'src/main/ruby/spec']
    environment['GEM_HOME'] = file('build/gems').path
    environment['GEM_PATH'] = file('build/gems').path
}

// consider using this style of args...
//args = ['-S', 'rake', 'migrate', "RAILS_ENV=${project.getProperty('database')}"]
//

//
// State Machine Compiler stuff...
//
task smcJava(type: JavaExec, dependsOn: 'gensrcDirs') {
    def smcFiles = fileTree('src/main/smc').include('**/*.sm')
    ext.outputPath = "${project.buildDir}/generated-src/example/smc"
    inputs.files smcFiles
    outputs.dir outputPath
    classpath configurations.smc
    main = 'net.sf.smc.Smc'
    args('-java')
    args('-d')
    args("${project.buildDir}/generated-src/example/smc")
    args(smcFiles.files)
}

//
// Note: on OSX, install graphviz. This will allow you to view the .dot graphs.
// You can convert .dot files to an image by executing
// dot -Tpng filename.dot -o outfile.png
//
task smcDiagrams(type: JavaExec, dependsOn: 'gensrcDirs') {
    def smcFiles = fileTree('src/main/smc').include('**/*.sm')
    ext.outputPath = "${project.buildDir}/generated-src/example/smc"
    inputs.files smcFiles
    outputs.dir outputPath
    classpath configurations.smc
    main = 'net.sf.smc.Smc'
    args('-graph')
    args('-glevel')
    args('1')
    args('-d')
    args("${project.buildDir}/generated-src/example/smc")
    args(smcFiles.files)
}


sourceSets.main.java.srcDir smcJava.outputPath
compileJava.dependsOn smcJava



